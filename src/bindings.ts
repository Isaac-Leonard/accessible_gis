/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function loadFile(name: string) {
    return invoke()<string>("load_file", { name })
}

export function getAppInfo() {
    return invoke()<LayerDescriptor[]>("get_app_info")
}

export function getBandSizes() {
    return invoke()<RasterSize[]>("get_band_sizes")
}

export function getValueAtPoint(point: Point, layer: LayerDescriptor) {
    return invoke()<ValueType>("get_value_at_point", { point,layer })
}

export function getPointOfMaxValue(layer: LayerDescriptor) {
    return invoke()<Point>("get_point_of_max_value", { layer })
}

export function getPointOfMinValue(layer: LayerDescriptor) {
    return invoke()<Point>("get_point_of_min_value", { layer })
}

export function getPolygonsAroundPoint(point: Point, layer: LayerDescriptor) {
    return invoke()<PolygonInfo[]>("get_polygons_around_point", { point,layer })
}

export function getLayerInfo(layer: LayerDescriptor) {
    return invoke()<LayerOverview>("get_layer_info", { layer })
}

export function getFeatureInfo(feature: number, layer: LayerDescriptor) {
    return invoke()<FeatureInfo | null>("get_feature_info", { feature,layer })
}

export function getFeatureNames(nameField: string, layer: LayerDescriptor) {
    return invoke()<FeatureNames | null>("get_feature_names", { nameField,layer })
}

export function describeLine(line: LineString, srs: string | null, distance: number, towns: number) {
    return invoke()<LineDescription>("describe_line", { line,srs,distance,towns })
}

export function describePolygon(polygon: Polygon) {
    return invoke()<string>("describe_polygon", { polygon })
}

export function pointInCountry(layer: LayerDescriptor, point: Point) {
    return invoke()<DistanceFromBoarder | null>("point_in_country", { layer,point })
}

export function nearestTown(layer: LayerDescriptor, point: Point) {
    return invoke()<DistanceFromBoarder | null>("nearest_town", { layer,point })
}

export function theissenPolygonsCalculation(records: ThiessenPolygonRecord[], srs: string) {
    return invoke()<number[]>("theissen_polygons_calculation", { records,srs })
}

export function theissenPolygons(points: MultiPoint, srs: string) {
    return invoke()<Polygon[]>("theissen_polygons", { points,srs })
}

export function getCsv(file: string) {
    return invoke()<string[][]>("get_csv", { file })
}

export function theissenPolygonsToFile(points: MultiPoint, srs: string, file: string) {
    return invoke()<string>("theissen_polygons_to_file", { points,srs,file })
}

export type FeatureInfo = { fields: Field[]; geometry: Geometry }
export type DistanceFromBoarder = { name: string; distance: number }
export type Geometry = ({ type: "Point" } & Point) | ({ type: "Line" } & Line) | ({ type: "LineString" } & LineString) | ({ type: "Polygon" } & Polygon) | ({ type: "MultiPoint" } & MultiPoint) | ({ type: "MultiLineString" } & MultiLineString) | ({ type: "MultiPolygon" } & MultiPolygon) | ({ type: "GeometryCollection" } & GeometryCollection)
export type OpenLineDescription = { x: number; y: number; length: number; end_to_end_distance: number; angular_sum: number; countries: string[]; towns: string[]; waviness: number; distances: number; number_of_points: number }
export type Field = ({ type: "Integer"; value: number } | { type: "IntegerList"; value: number[] } | { type: "Integer64"; value: number } | { type: "Integer64List"; value: number[] } | { type: "String"; value: string } | { type: "StringList"; value: string[] } | { type: "Real"; value: number } | { type: "RealList"; value: number[] } | { type: "Date"; value: string } | { type: "DateTime"; value: string } | { type: "None" }) & { name: string }
export type PolygonInfo = { area: number; fields: Field[] }
export type ThiessenPolygonRecord = { point: Point; file: string; start_line: number; column: number }
export type MultiLineString = { lines: LineString[] }
export type Line = { start: Point; end: Point }
export type FieldValue = { type: "Integer"; value: number } | { type: "IntegerList"; value: number[] } | { type: "Integer64"; value: number } | { type: "Integer64List"; value: number[] } | { type: "String"; value: string } | { type: "StringList"; value: string[] } | { type: "Real"; value: number } | { type: "RealList"; value: number[] } | { type: "Date"; value: string } | { type: "DateTime"; value: string } | { type: "None" }
export type MultiPolygon = { polygons: Polygon[] }
export type LayerOverview = { name: string; extent: Envelope | null; features: number; field_names: string[] }
export type ValueType = number | string
export type LineString = { points: Point[] }
export type ClosedLineDescription = { x: number; y: number; perimeter: number; area: number; countries: string[]; towns: string[]; waviness: number; distances: number; number_of_points: number }
export type LineDescription = ({ type: "Closed" } & ClosedLineDescription) | ({ type: "Open" } & OpenLineDescription)
export type LayerDescriptor = ({ type: "Raster"; width: number; length: number } | { type: "Vector" }) & { dataset: number; band: number; dataset_file: string; srs: string | null; projection: string }
export type Point = { x: number; y: number }
export type Polygon = { exterior: LineString; interior: LineString[] }
export type MultiPoint = { points: Point[] }
export type RasterSize = { width: number; length: number; bands: number }
export type GeometryCollection = { geometries: Geometry[] }
export type Envelope = { min_x: number; max_x: number; min_y: number; max_y: number }
export type FeatureNames = { field: string; features: string[] }
export type LayerInfo = { type: "Raster"; width: number; length: number } | { type: "Vector" }
